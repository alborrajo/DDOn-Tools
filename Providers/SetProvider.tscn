[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

signal drops_tables_updated()
signal selected_day_night()

var _drops_tables := [] # TODO: Maybe use a dictionary instead
var _enemy_sets := []
var _gathering_spots := []
var selected_day_night = 0

func _ready():
	for stage_no in DataProvider.enemy_sets.keys():
		for enemy_set in DataProvider.enemy_sets[stage_no]:
			var stage_id := DataProvider.stage_no_to_stage_id(int(stage_no))
			var layer_no := 0
			var group_no := int(enemy_set[\"GroupNo\"])
			var subgroup_no := int(enemy_set[\"SubGroupNo\"])
			var enemy_set_instance := EnemySet.new(stage_id, layer_no, group_no, subgroup_no)
			_enemy_sets.append(enemy_set_instance)
			var positions = []
			for position_index in enemy_set[\"Positions\"].size():
				var position = enemy_set[\"Positions\"][position_index]
				var pos := Vector3(position[\"x\"], position[\"y\"], position[\"z\"])
				var enemy_position := EnemyPosition.new(pos)
				positions.append(enemy_position)
			enemy_set_instance.positions = positions

func select_day_night(index):
	# Emit a custom signal with the selected index
	emit_signal(\"selected_day_night\", index)
	selected_day_night = index

func clear_drops_tables() -> void:
	_drops_tables.clear()
	emit_signal(\"drops_tables_updated\")

func remove_drops_table(drops_table_id: int) -> DropsTable:
	for idx in _drops_tables.size():
		var table: DropsTable = _drops_tables[idx]
		if table.id == drops_table_id:
			_drops_tables.remove(idx)
			emit_signal(\"drops_tables_updated\")
			return table
	return null

func get_drops_table(drops_table_id: int) -> DropsTable:
	for table in _drops_tables:
		if table.id == drops_table_id:
			return table

	var table := DropsTable.new(drops_table_id)
	_drops_tables.append(table)
	emit_signal(\"drops_tables_updated\")
	return table

func get_all_drops_tables() -> Array:
	return Array(_drops_tables)


func clear_enemy_sets() -> void:
	for set in _enemy_sets:
		set.clear_enemies()

func get_enemy_set(stage_id: int, layer_no: int, group_id: int, subgroup_id: int) -> EnemySet:
	# Inefficient af
	var set_for_same_group: EnemySet = null
	for set in _enemy_sets:
		if set.stage_id == stage_id and set.layer_no == layer_no and set.group_id == group_id:
			if set.subgroup_id == subgroup_id:
				return set
			else:
				set_for_same_group = set
	
	# Create a new set for the new subgroup
	# TODO: Rework EnemySet into containing a list of subgroups instead
	if set_for_same_group != null:
		var set := EnemySet.new(stage_id, layer_no, group_id, subgroup_id)
		for position in set_for_same_group.positions:
			set.positions.append(EnemyPosition.new(position.coordinates))
		_enemy_sets.append(set)
		return set
		
	return null

func get_all_enemy_sets() -> Array:
	return Array(_enemy_sets)


func clear_gathering_spots() -> void:
	for spot in _gathering_spots:
		spot.clear_gathering_items()

func get_gathering_spot(stage_id: int, group_id: int, subgroup_id: int) -> GatheringSpot:
	# Inefficient af
	for set in _gathering_spots:
		if set.stage_id == stage_id and set.group_id == group_id and set.subgroup_id == subgroup_id:
			return set
	
	var set := GatheringSpot.new(stage_id, group_id, subgroup_id)
	_gathering_spots.append(set)
	return set

func get_all_gathering_spots() -> Array:
	return Array(_gathering_spots)
"

[node name="SetProvider" type="Node"]
script = SubResource( 1 )
