[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
resource_name = "SelectedListManager"
script/source = "extends Node

signal selection_changed(added, removed)
signal set_revealed_hidden()

var selected_list := []
var enemy_type := false
var item_type := false

# Function to apply values to selected enemy or item
func apply_values_to_selected_type(parameter_name: String, parameter_value):
	for entry in selected_list:
		var data = entry[\"data\"]
		data[parameter_name] = parameter_value
		
# Function to check the list for type and removes if it exists already
func toggle_selection(placemark: GenericPlacemark, data: Object):
	if placemark is EnemyPlacemark:
		enemy_type = true
	elif placemark is GatheringItemPlacemark:
		item_type = true
	else:
		return # Ignore anything else
		
	if enemy_type and item_type:
		clear_list()

	var index = _find_entry_index(placemark)
	if index != -1:
		_remove_from_selection(index)
	else:
		_add_to_selection({\"placemark\": placemark, \"data\": data})

func _add_to_selection(entry):
	selected_list.append(entry)
	emit_signal(\"selection_changed\", [entry], [])
	
func _remove_from_selection(index):
	var removed = selected_list[index]
	selected_list.remove(index)
	emit_signal(\"selection_changed\", [], [removed])
	
# Function to find the index of an entry in the list
func _find_entry_index(placemark: GenericPlacemark) -> int:
	for i in range(selected_list.size()):
		if selected_list[i][\"placemark\"] == placemark:
			return i
	return -1

# Function to clear the list and emit a signal to inform the placemarks.
func clear_list():
	var removed_list := selected_list.duplicate()
	selected_list.clear()
	emit_signal(\"selection_changed\", [], removed_list)
	enemy_type = false
	item_type = false

# Function that handles the deletion of multiple placemarks.
# Handle the list in reverse order to ensure it doesn't trip over any indexes and fail to delete entries
func delete_selected():
	var removed_list := []
	for index in range(selected_list.size() - 1, -1, -1):
		var entry = selected_list[index]
		var placemark = entry[\"placemark\"]
		placemark.delete_self()
		removed_list.append(entry)
		selected_list.remove(index)
	emit_signal(\"selection_changed\", [], removed_list)
	
func reveal_hidden():
	emit_signal(\"set_revealed_hidden\")
	
func add_to_selection(placemark, data):
	var entry = {\"placemark\": placemark, \"data\": data}
	var index = _find_entry_index(placemark)
	if index == -1:
		_add_to_selection(entry)
	
func remove_from_selection(placemark, _data):
	var index = _find_entry_index(placemark)
	if index != -1:
		_remove_from_selection(index)

func is_list_empty() -> bool:
	return selected_list.size() <= 0
"

[node name="SelectedListManager" type="Node"]
script = SubResource( 1 )
